import { AnchorProvider, Program, Wallet } from "@coral-xyz/anchor";
import {
  Connection,
  Keypair,
  PublicKey,
  Transaction,
  VersionedTransaction,
} from "@solana/web3.js";
import { IDL, PROGRAM_ID as PROGRAM_ID_STRING } from "../idl";
import type { Sodap } from "../idl/sodap";
    }

    // Fix potential issues in the IDL format
    if (idlCopy.instructions) {
      idlCopy.instructions.forEach((ix: { discriminator?: string }) => {
        // Some versions of Anchor need this format
        if (ix.discriminator) delete ix.discriminator;
      });
    }

    console.log("Creating Anchor program with ID:", PROGRAM_ID.toString());
    return Program.at(PROGRAM_ID, provider);ovider: AnchorProvider): Program<Sodap> => {
  try {
    // Ensure the IDL is properly formatted for Anchor
    const idlCopy = JSON.parse(JSON.stringify(IDL)) as Idl;

    // Make sure we're not using a malformed IDL
    if (!idlCopy || typeof idlCopy !== "object") {
      throw new Error("Invalid IDL format");
    }

    // Fix potential issues in the IDL format
    if (idlCopy.instructions) {
      idlCopy.instructions.forEach((ix: { discriminator?: string }) => {
        // Some versions of Anchor need this format
        if (ix.discriminator) delete ix.discriminator;
      });
    }

    console.log("Creating Anchor program with ID:", PROGRAM_ID.toString());
    return new Program(idlCopy, PROGRAM_ID, provider);,
  Transaction,
  VersionedTransaction,
  TransactionVersion,
} from "@solana/web3.js";
import { IDL, PROGRAM_ID as PROGRAM_ID_STRING } from "../idl";
import type { Sodap } from "../idl/sodap";

// Program ID from the Anchor.toml file - MUST match what's in the Rust code
export const PROGRAM_ID = new PublicKey(PROGRAM_ID_STRING);

// Add TypeScript declaration for Phantom wallet
declare global {
  interface Window {
    phantom?: {
      solana?: {
        isPhantom: boolean;
        connect: (options?: {
          onlyIfTrusted?: boolean;
        }) => Promise<{ publicKey: PublicKey }>;
        disconnect: () => Promise<void>;
        signTransaction: <T extends Transaction | VersionedTransaction>(
          transaction: T
        ) => Promise<T>;
        signAllTransactions: <T extends Transaction | VersionedTransaction>(
          transactions: T[]
        ) => Promise<T[]>;
        isUnlocked: () => Promise<boolean>;
      };
    };
  }
}

/**
 * Create an Anchor provider with the given connection and wallet
 */
export const createAnchorProvider = (
  connection: Connection,
  wallet: Wallet
): AnchorProvider => {
  const provider = new AnchorProvider(
    connection,
    wallet,
    AnchorProvider.defaultOptions()
  );
  return provider;
};

/**
 * Create a wallet object from a private key
 * Only for testing - do not use in production
 */
export const createTestWallet = (privateKey?: Uint8Array): Wallet => {
  let keypair: Keypair;

  if (privateKey) {
    keypair = Keypair.fromSecretKey(privateKey);
  } else {
    // Demo mode - generate a random keypair
    keypair = Keypair.generate();
  }

  // Create a wallet adapter that implements the Wallet interface
  const wallet: Wallet = {
    publicKey: keypair.publicKey,
    signTransaction: async <T extends Transaction | VersionedTransaction>(
      tx: T
    ): Promise<T> => {
      if (tx instanceof Transaction) {
        tx.partialSign(keypair);
      }
      return tx;
    },
    signAllTransactions: async <T extends Transaction | VersionedTransaction>(
      txs: T[]
    ): Promise<T[]> => {
      return txs.map((tx) => {
        if (tx instanceof Transaction) {
          tx.partialSign(keypair);
        }
        return tx;
      });
    },
    // Add payer getter to satisfy the Wallet interface
    get payer() {
      return keypair;
    },
  };

  return wallet;
};

/**
 * Create an Anchor program instance
 */
export const createAnchorProgram = (provider: AnchorProvider) => {
  try {
    // Ensure the IDL is properly formatted for Anchor
    const idlCopy = JSON.parse(JSON.stringify(IDL));

    // Make sure we're not using a malformed IDL
    if (!idlCopy || typeof idlCopy !== "object") {
      throw new Error("Invalid IDL format");
    }

    // Fix potential issues in the IDL format
    if (idlCopy.instructions) {
      idlCopy.instructions.forEach((ix: { discriminator?: string }) => {
        // Some versions of Anchor need this format
        if (ix.discriminator) delete ix.discriminator;
      });
    }

    console.log("Creating Anchor program with provider:", provider);
    return new Program<Sodap>(idlCopy as Sodap, PROGRAM_ID, provider);
  } catch (error) {
    console.error("Error creating Anchor program:", error);
    throw error;
  }
};

/**
 * Creates a phantom wallet adapter for Anchor
 */
export const createPhantomWalletAdapter = (publicKey: PublicKey): Wallet => {
  // Create a keypair that will be associated with the public key for payer
  const dummyKeypair = Keypair.generate();
  Object.defineProperty(dummyKeypair, "publicKey", {
    get: () => publicKey,
  });

  // This adapter works with the Phantom extension
  const wallet: Wallet = {
    publicKey,
    signTransaction: async <T extends Transaction | VersionedTransaction>(
      tx: T
    ): Promise<T> => {
      if (typeof window === "undefined" || !window.phantom?.solana) {
        throw new Error("Phantom wallet not available");
      }
      return await window.phantom.solana.signTransaction(tx);
    },
    signAllTransactions: async <T extends Transaction | VersionedTransaction>(
      txs: T[]
    ): Promise<T[]> => {
      if (typeof window === "undefined" || !window.phantom?.solana) {
        throw new Error("Phantom wallet not available");
      }
      return await window.phantom.solana.signAllTransactions(txs);
    },
    get payer() {
      return dummyKeypair;
    },
  };

  return wallet;
};
